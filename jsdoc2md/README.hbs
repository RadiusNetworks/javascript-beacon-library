# JavaScript Beacon Library

A JavaScript library for broadcasting BLE Beacon advertisements, wrapping existing
advertising APIs to make beacon transmission easier for developers.  The library
is flexible, supporting custom beacon types that can be registered with a `parserLayout`
 similar to the [Android Beacon Library](https://altbeacon.github.io/android-beacon-library/)
 and [ScanBeacon Ruby Gem](https://github.com/RadiusNetworks/scanbeacon-gem).  The
 following beacon types are also supported by default:

 - [AltBeacon](http://altbeacon.org/)
 - [Eddystone UID](https://github.com/google/eddystone/tree/master/eddystone-uid)
 - [Eddystone URL](https://github.com/google/eddystone/tree/master/eddystone-url)

**NOTE** Currently only the Chrome OS platform is supported.

## Usage
The JavaScript Beacon Library creates `window.beacon` of type
[`Beacon`](#beacon)

### Advertising

To register an advertisement use the `registerAdvertisement()` method:

#### AltBeacon

```js
let registered_adv;
beacon.registerAdvertisement({
  type: 'altbeacon',
  ids: ['2F234454CF6D4A0FADF2F4911BA9FFA6', 1, 1],
  advertisedTxPower: -59
}).then(advertisement => {
  registered_adv = advertisement;
  console.log('Advertising: ' + advertisement)
}).catch(error => console.log(error.message));
```

#### Eddystone UID

```js
let registered_adv;
beacon.registerAdvertisement({
  type: 'eddystone_uid',
  ids: ['2F234454F4911BA9FFA6', '000000000001'],
  advertisedTxPower: -20
}).then(advertisement => {
  registered_adv = advertisement;
  console.log('Advertising: ' + advertisement)
}).catch(error => console.log(error.message));
```

#### Eddystone URL

```js
let registered_adv;
beacon.registerAdvertisement({
  type: 'eddystone_url',
  ids: ['http://example.com'],
  advertisedTxPower: -20
}).then(advertisement => {
  registered_adv = advertisement;
  console.log('Advertising: ' + advertisement)
}).catch(error => console.log(error.message));
```

### Stop advertising

To stop advertising use the `unregisterAdvertisement()` method:

```js
registered_adv.unregisterAdvertisement().then(() => {
  console.log('Advertisement unregistered successfully.');
}).catch(error => console.log(error.message));
```

Or if you have multiple advertisements:
```js
beacon.advertisements.forEach(advertisement => {
  advertisement.unregisterAdvertisement()
    .then(() => console.log('Unregistered successfully'))
    .catch(error => console.log('Couldn\'t unregister the advertisement: ' + error.message));
});
```

### Register a custom beacon type

To register a custom beacon type use the `registerBeaconType()` method:

```
beacon.registerBeaconType({
  type: 'cool_beacon',
  parserLayout: 'm:2-3=0000,i:4-19,i:20-21,i:22-23,p:24-24',
  manufacturerId: 0x1234
})
```

For more information on the `parserLayout` check out
[this page](http://altbeacon.github.io/android-beacon-library/javadoc/org/altbeacon/beacon/BeaconParser.html#setBeaconLayout(java.lang.String))
from the Android Beacon Library docs.

## Build and test the library

Run browser/unit tests with npm:

```
$ npm run test
```

Build library with npm:

```
$ npm run browserify
```

After building the product can be found under the project root directory

## API
{{>main}}
